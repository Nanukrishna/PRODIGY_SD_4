def print_grid(grid):
    """Print the Sudoku grid in a readable format."""
    for row in grid:
        print(" ".join(str(num) for num in row))

def is_valid(grid, row, col, num):
    """Check if a number can be placed at the given position."""
    # Check the row
    if num in grid[row]:
        return False

    # Check the column
    if num in (grid[i][col] for i in range(9)):
        return False

    # Check the 3x3 box
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if grid[start_row + i][start_col + j] == num:
                return False

    return True

def solve_sudoku(grid):
    """Solve the Sudoku puzzle using backtracking."""
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:  # Find an empty space
                for num in range(1, 10):  # Numbers 1-9
                    if is_valid(grid, row, col, num):
                        grid[row][col] = num  # Place the number
                        if solve_sudoku(grid):
                            return True  # If it leads to a solution
                        grid[row][col] = 0  # Backtrack
                return False  # Trigger backtracking
    return True  # Solved

def main():
    # Example Sudoku grid (0 represents empty cells)
    grid = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]

    print("Original Sudoku Grid:")
    print_grid(grid)

    if solve_sudoku(grid):
        print("\nSolved Sudoku Grid:")
        print_grid(grid)
    else:
        print("No solution exists.")

if __name__ == "__main__":
    main()
